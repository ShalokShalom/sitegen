#!/usr/bin/env moon

moonscript = require "moonscript"
moon = require "moon"
cosmo = require "cosmo"

import run_with_scope, extend, dump from require "moon"
import SiteFile from require "sitegen.site_file"
import catch_error from require "sitegen.common"

action = arg[1] or "build"

default = {
  sitefile: "site.moon"
  files:
    page: [==[
    date: $eval{"require('date')()"}
    $if{"title"}[[title: $title]]
--

]==]
    sitefile: [==[
require "sitegen"
site = sitegen.create_site =>
  @title = $title
site\write!
]==]
}

log = (...) ->
  print "->", ...

scope = (t={}) ->
  extend t, {
    eval: (arg) ->
      code = "return -> " .. arg[1]
      moonscript.loadstring(code)!!
    if: (arg) ->
      var_name = arg[1]
      cosmo.yield t if t[var_name]
      nil
  }

get_site = -> SiteFile!\get_site!

annotate = (obj, verbs) ->
  setmetatable {}, {
    __newindex: (name, value) =>
      obj[name] = value
    __index: (name) =>
      fn =  obj[name]
      return fn if not type(fn) == "function"
      if verbs[name]
        (...) ->
          fn ...
          first = ...
          log verbs[name], first
      else
        fn
  }

Path = annotate Path, {
  mkdir: "made directory"
  write_file: "wrote"
}

-- wrap test based on tokens
wrap_text = (text, indent=0, max_width=80) ->
  width = max_width - indent
  words = split text, " "
  pos = 1
  lines = {}
  while pos <= #words
    line_len = 0
    line = {}
    while true
      word = words[pos]
      break if word == nil
      error "can't wrap text, words too long" if #word > width
      break if line_len + #word > width

      pos += 1
      table.insert line, word
      line_len += #word + 1 -- +1 for the space

    table.insert lines, table.concat line, " "

  table.concat lines, "\n" .. (" ")\rep indent

columnize = (rows, indent=2, padding=4) ->
  max = 0
  max = math.max max, #row[1] for row in *rows

  left_width = indent + padding + max

  formatted = for row in *rows
    padd = (max - #row[1]) + padding
    table.concat {
      (" ")\rep indent
      row[1]
      (" ")\rep padd
      wrap_text row[2], left_width
    }

  table.concat formatted, "\n"

tasks = {
  dump: -> print dump get_site!

  new: ->
    if Path.exists default.sitefile
      throw_error "sitefile already exists: " .. default.sitefile

    title = ("%q")\format arg[2] or "Hello World"

    Path.mkdir"www"
    Path.mkdir"templates"

    site_moon = cosmo.f(default.files.sitefile) scope{:title}
    Path.write_file default.sitefile, site_moon

  page: ->
    get_site!
    path, title = arg[2], arg[3]

    if not title
      title = path
      path_part, title_part = title\match"^(.-)([^/]+)$"
      if path_part
        title = title_part
        path = path_part
      else
        path = '.'

    Path.mkdir path if Path.normalize(path) != ""

    -- iterater for all potential file names
    names = (fname, ext=".md") ->
      i = 0
      coroutine.wrap ->
        while true
          coroutine.yield if i == 0
            fname .. ext
          else
            table.concat {fname, "_", i, ext }
          i += 1

    full_path = nil
    for name in names slugify title
      full_path = Path.join path, name
      if not Path.exists full_path
        break

    Path.write_file full_path, cosmo.f(default.files.page) scope{:title}

  deploy: ->
    get_site!

    DeployPlugin = require "sitegen.deploy"
    host, path = arg[2] or DeployPlugin.host, arg[3] or DeployPlugin.path

    throw_error "need host" if not host
    throw_error "need path" if not path

    log "uploading to:", host, path
    DeployPlugin\sync host, path

  build: ->
    site = get_site!

    filter = nil
    if #arg > 1
      filter = {}
      for i, fname in ipairs arg
        if i > 1
          filter[site.sitefile\relativeize fname] = true

    site\write filter

  watch: ->
    site = get_site!
    w = require "sitegen.watch"

    with w.Watcher site
      \loop!

  help: ->
    print "Sitegen"
    print "usage: sitegen <action> [args]"
    print!
    print "Available actions:"

    print!
    print columnize {
      {"new", "Create a new site in the current directory"}
      {"build [input-files]", "Build (or rebuild) all pages, or only files"}
      {"page <path> [title]", "Create a new markdown page at path"}
      {"deploy [host] [path]", "Deploy site to host over ssh (rsync)"}
      {"watch", "Compile pages automatically when inputs change (needs inotify)"}
    }
    print!
}

-- potential commands:
-- plugins: sitegen blog:post "Hello World" -- did I already do this?

catch_error ->
  if not tasks[action]
    throw_error "unknown task: " .. action

  tasks[action]!


-- vim: set filetype=moon:
